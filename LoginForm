import {Component} from 'react'
import Cookies from 'js-cookie'
import {Redirect} from 'react-router-dom'

const websiteLogoInForm =
  'https://assets.ccbp.in/frontend/react-js/logo-img.png'

class LoginForm extends Component {
  state = {username: '', password: '', showSubmitError: false, errorMsg: ''}

  onGetUsername = event => this.setState({username: event.target.value})

  onGetPassword = event => this.setState({password: event.target.value})

  onSubmitSuccess = jwtToken => {
    const {history} = this.props

    Cookies.set('jwt_token', jwtToken, {expires: 30, path: '/'})
    history.replace('/')
  }

  onSubmitFailure = erroMsg => {
    this.setState({showSubmitError: true, erroMsg})
  }

  onSubmitLoginForm = async event => {
    event.preventDefault()
    const {username, password} = this.state
    const userDetails = {username, password}
    const loginApiUrl = 'https://apis.ccbp.in/login'
    const options = {
      method: 'POST',
      body: JSON.stringify(userDetails),
    }
    const response = await fetch(loginApiUrl, options)
    const data = await response.json()
    if (response.ok === true) {
      this.onSubmitSuccess(data.jwt_token)
    } else {
      this.onSubmitFailure(data.error_msg)
    }
  }

  render() {
    const {username, password, showSubmitError, errorMsg} = this.state
    const jwtToken = Cookies.get('jwt_token')
    if (jwtToken !== undefined) {
      return <Redirect to="/" />
    }
    return (
      <div className="login-container">
        <form
          className="login-form-container"
          onSubmit={this.onSubmitLoginForm}
        >
          <div className="form-logo-container">
            <img src={websiteLogoInForm} alt="website logo" />
            <lobel className="form-label" htmlFor="username">
              USERNAME
            </lobel>
            <br />
            <input
              className="form-input"
              type="text"
              value={username}
              onChange={this.onGetUsername}
              placeholder="username"
              id="username"
            />
            <br />
            <br />
            <label className="form-label" htmlFor="password">
              PASSWORD
            </label>
            <br />
            <input
              className="form-input"
              type="password"
              value={password}
              onChange={this.onGetPassword}
              placeholder="password"
              id="password"
            />
            <br />
            <br />
            <button className="form-submit-button" type="submit">
              Login
            </button>
            {showSubmitError && <p className="error-message">*{errorMsg}</p>}
          </div>
        </form>
      </div>
    )
  }
}
export default LoginForm









.login-container {
  background-color: #000;
  height: 100vh;
  padding-top: 30px;
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
}

.login-form-container {
  background-color: #272727;
  border-radius: 10px;
  padding: 40px;
  width: 40%;
}

.form-logo-container {
  display: flex;
  flex-direction: row;
  justify-content: center;
  padding: 20px;
}

.form-label {
  color: #fff;
  font-weight: 500;
  font-size: 20px;
  font-family: 'Roboto';
}

.from-input {
  border-radius: 5px;
  border: 1px solid #7e858e;
  color: #fff;
  width: 100%;
  height: 40px;
  background-color: transparent;
  margin-top: 5px;
  font-size: 15px;
}

.form-submit-button {
  color: #fff;
  background-color: #6366f1;
  border: 0;
  border-radius: 5px;
  width: 100%;
  font-weight: bold;
  font-size: 20px;
  font-family: 'Roboto';
  padding: 5px;
  height: 40px;
  cursor: pointer;
}

.error-message {
  color: #ff0b37;
  font-family: 'Roboto';
}

@media screen and (max-width: 767px) {
  .login-container {
    padding: 15px;
  }
}

.login-form-container {
  width: 100%;
}

